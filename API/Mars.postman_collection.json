{
	"info": {
		"_postman_id": "2aefdc13-003e-4311-ac06-31bd27f0db66",
		"name": "Mars",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26913678"
	},
	"item": [
		{
			"name": "User",
			"item": [
				{
					"name": "SignUp",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema= {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"isSuccess\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"isSuccess\": {\r",
									"            \"type\": \"boolean\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // validating status code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    if (jsonData.isSuccess === true) {\r",
									"        // validating response schema\r",
									"        pm.test(\"Validate response schema\", function () {\r",
									"        pm.expect(jsonData.isSuccess).to.be.true;\r",
									"        pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    }\r",
									"    else if (jsonData.message === \"Register error - Email address has been used in registration.\") {\r",
									"        pm.test(\"Validate sign up with existing user fail\", function () {\r",
									"        pm.expect(jsonData.isSuccess).to.be.false;\r",
									"        pm.expect(jsonData.message).to.equal(\"Register error - Email address has been used in registration.\");\r",
									"        });    \r",
									"    }\r",
									"     else if (jsonData.message === \"Parameter can not be null\") {\r",
									"        pm.test(\"Registration fail, null parameter\", function () {\r",
									"        pm.expect(jsonData.isSuccess).to.be.false;\r",
									"        pm.expect(jsonData.message).to.equal(\"Parameter can not be null\");\r",
									"        });\r",
									"     }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"  var schema ={\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"firstName\",\r",
									"        \"lastName\",\r",
									"        \"countryDialCode\",\r",
									"        \"mobilePhone\",\r",
									"        \"email\",\r",
									"        \"password\",\r",
									"        \"terms\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"firstName\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"lastName\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"countryDialCode\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"mobilePhone\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"email\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"password\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"terms\": {\r",
									"            \"type\": \"boolean\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									"var jsonString = JSON.stringify(schema);\r",
									"pm.environment.set(\"schema\", jsonString);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"test\",\r\n  \"lastName\": \"test\",\r\n  \"countryDialCode\": \"\",\r\n  \"mobilePhone\": \"\",\r\n  \"email\": \"test807@gmail.com\",\r\n  \"password\": \"test@123\",\r\n  \"terms\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:60968/authentication/authentication/signup",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60968",
							"path": [
								"authentication",
								"authentication",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "SignIn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema={\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"isSuccess\",\r",
									"        \"token\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"isSuccess\": {\r",
									"            \"type\": \"boolean\"\r",
									"        },\r",
									"        \"token\": {\r",
									"            \"type\": \"object\",\r",
									"            \"required\": [\r",
									"                \"token\",\r",
									"                \"expires\"\r",
									"            ],\r",
									"            \"properties\": {\r",
									"                \"token\": {\r",
									"                    \"type\": \"string\"\r",
									"                          },\r",
									"                \"expires\": {\r",
									"                    \"type\": \"integer\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"};\r",
									"var statusCode=pm.response.code;\r",
									"\r",
									"if(statusCode==200)\r",
									"{\r",
									"    var jsonData=pm.response.json();\r",
									"\r",
									"    //validating status code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    if(jsonData.isSuccess==true)\r",
									"    {\r",
									"        //setting value of environmet variable authToken\r",
									"        var token = jsonData.token.token;\r",
									"        pm.environment.set(\"authToken\", token);\r",
									"\r",
									"        //validating response schema\r",
									"        pm.test(\"Validate response schema\", () => {\r",
									"            pm.expect(jsonData.isSuccess).to.be.true;\r",
									"            pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    }\r",
									"    else if(jsonData.isSuccess==false)\r",
									"    {\r",
									"\r",
									"        pm.test(\"Validate sign in fail\", function () {\r",
									"              pm.expect(jsonData.isSuccess).to.be.false;\r",
									"        });\r",
									"    }\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"  var schema ={\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"rememberMe\",\r",
									"        \"email\",\r",
									"        \"password\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"rememberMe\": {\r",
									"            \"type\": \"boolean\"\r",
									"        },\r",
									"        \"email\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"password\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									"var jsonString = JSON.stringify(schema);\r",
									"pm.environment.set(\"schema\", jsonString);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"rememberMe\": false,\r\n  \"email\": \"test16@gmail.com\",\r\n  \"password\": \"test@123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:60968/authentication/authentication/signin",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60968",
							"path": [
								"authentication",
								"authentication",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdatePassword",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema={\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"success\",\r",
									"        \"message\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"success\": {\r",
									"            \"type\": \"boolean\"\r",
									"        },\r",
									"        \"message\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									"var statusCode=pm.response.code;\r",
									"\r",
									"if(statusCode==200)\r",
									"{\r",
									"    var jsonData=pm.response.json();\r",
									"\r",
									"    //validating status code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    if(jsonData.success==true)\r",
									"    {\r",
									"      //validating response schema\r",
									"        pm.test(\"Validate schema\", () => {\r",
									"        pm.expect(jsonData.success).to.be.true;\r",
									"        pm.expect(jsonData.message).to.equal(\"Password Changed Successfully\");\r",
									"        pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    }\r",
									"    else if (jsonData.message === \"Password Verification Failed\") {\r",
									"        pm.test(\"Password Verification Failed\", function () {\r",
									"        pm.expect(jsonData.success).to.be.false;\r",
									"        pm.expect(jsonData.message).to.equal(\"Password Verification Failed\");\r",
									"        });\r",
									"    }\r",
									"    else if (jsonData.message === \"Error while Updating Password details\") {\r",
									"        pm.test(\"Error while Updating Password details\", function () {\r",
									"        pm.expect(jsonData.success).to.be.false;\r",
									"        pm.expect(jsonData.message).to.equal(\"Error while Updating Password details\");\r",
									"        });\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (pm.environment.get(\"skipRequest\") === \"true\") {\r",
									"    pm.execution.skipRequest();\r",
									"}\r",
									"var schema= {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"oldPassword\",\r",
									"        \"newPassword\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"oldPassword\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"newPassword\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									"var jsonString = JSON.stringify(schema);\r",
									"pm.environment.set(\"schema\", jsonString);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"oldPassword\": \"test@123\",\r\n  \"newPassword\": \"test@12\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:60968/authentication/authentication/updatePassword",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60968",
							"path": [
								"authentication",
								"authentication",
								"updatePassword"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Language",
			"item": [
				{
					"name": "AddLanguage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"success\",\r",
									"        \"id\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"success\": {\r",
									"            \"type\": \"boolean\"\r",
									"        },\r",
									"        \"id\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // validating status code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    if (jsonData.success === true) {\r",
									"\r",
									"        // setting value of environment variable languageId\r",
									"        var languageId = jsonData.id;\r",
									"        pm.environment.set(\"languageId\", languageId);\r",
									"\r",
									"        // validating response schema\r",
									"        pm.test(\"Validate response schema\", function () {\r",
									"         pm.expect(jsonData.success).to.be.true;\r",
									"         pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    }\r",
									"     else if (jsonData.message === \"This language is already exist in your language list.\") {\r",
									"        pm.test(\"Validate duplicate language not added\", function () {\r",
									"         pm.expect(jsonData.success).to.be.false;\r",
									"         pm.expect(jsonData.message).to.equal(\"This language is already exist in your language list.\");\r",
									"        });\r",
									"    }\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"   var schema ={\r",
									"     \"type\": \"object\",\r",
									"     \"required\": [\r",
									"         \"name\",\r",
									"         \"level\"\r",
									"     ],\r",
									"     \"properties\": {\r",
									"         \"name\": {\r",
									"             \"type\": \"string\"\r",
									"         },\r",
									"         \"level\": {\r",
									"             \"type\": \"string\"\r",
									"         }\r",
									"     }\r",
									" };\r",
									" var jsonString = JSON.stringify(schema);\r",
									" pm.environment.set(\"schema\", jsonString);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"English\",\r\n  \"level\": \"Fluent\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:60190/profile/profile/addLanguage",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"addLanguage"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetLanguage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema ={\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"required\": [\r",
									"            \"personLanguageId\",\r",
									"            \"language\",\r",
									"            \"languageLevel\"\r",
									"        ],\r",
									"        \"properties\": {\r",
									"            \"personLanguageId\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"language\": {\r",
									"                \"type\": \"string\"\r",
									"                            },\r",
									"            \"languageLevel\": {\r",
									"                \"type\": \"string\"\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"};\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // validating status code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    // validating response schema\r",
									"    pm.test(\"Validate request schema\", function () {\r",
									"        pm.response.to.have.jsonSchema(schema);\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"schema\", '{}');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:60190/profile/profile/getLanguage",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"getLanguage"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateLanguage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"success\",\r",
									"        \"message\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"success\": {\r",
									"            \"type\": \"boolean\"        },\r",
									"        \"message\": {\r",
									"            \"type\": \"string\"        }\r",
									"    }};\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // validating status code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"     pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    if (jsonData.success === true) {\r",
									"\r",
									"        // validating response schema\r",
									"        pm.test(\"Validate response schema\", function () {\r",
									"         pm.expect(jsonData.success).to.be.true;\r",
									"         pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    }\r",
									"    else if (jsonData.message === \"This language is already added to your language list.\") {\r",
									"        pm.test(\"Validate duplicate language not updated\", function () {\r",
									"         pm.expect(jsonData.success).to.be.false;\r",
									"         pm.expect(jsonData.message).to.equal(\"This language is already added to your language list.\");\r",
									"        });\r",
									"    }\r",
									"    else if (jsonData.message === \"Error while adding new language\") {\r",
									"        pm.test(\"Error in updating language\", function () {\r",
									"         pm.expect(jsonData.success).to.be.false;\r",
									"         pm.expect(jsonData.message).to.equal(\"Error while adding new language\");\r",
									"        });\r",
									"    }\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									" var schema={\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"id\",\r",
									"        \"name\",\r",
									"        \"level\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"id\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"name\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"level\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									" var jsonString = JSON.stringify(schema);\r",
									" pm.environment.set(\"schema\", jsonString);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"{{languageId}}\",\r\n   \"name\": \"Nepali\",\r\n  \"level\": \"Basic\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:60190/profile/profile/updateLanguage",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"updateLanguage"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteLanguage",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"success\",\r",
									"        \"language\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"success\": {\r",
									"            \"type\": \"boolean\"\r",
									"        },\r",
									"        \"language\": {\r",
									"            \"type\": \"string\" \r",
									"       }\r",
									"    }\r",
									"};\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // validating status code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"        // validating response schema\r",
									"        pm.test(\"Validate response schema\", function () {\r",
									"            pm.expect(jsonData.success).to.be.true;\r",
									"            pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"      \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var schema={\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"id\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"id\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									" var jsonString = JSON.stringify(schema);\r",
									" pm.environment.set(\"schema\", jsonString);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"{{languageId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:60190/profile/profile/deleteLanguage",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"deleteLanguage"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Skill",
			"item": [
				{
					"name": "AddSkill",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"   var schema ={\r",
									"  \"type\": \"object\",\r",
									"  \"required\": [\r",
									"    \"PersonSkillId\",\r",
									"    \"Skill\",\r",
									"    \"ExperienceLevel\"\r",
									"  ],\r",
									"  \"properties\": {\r",
									"    \"PersonSkillId\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"Skill\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"ExperienceLevel\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  }\r",
									"};\r",
									"\r",
									" var jsonString = JSON.stringify(schema);\r",
									" pm.environment.set(\"schema\", jsonString);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema ={",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"success\",",
									"        \"id\"",
									"    ],",
									"    \"properties\": {",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        },",
									"        \"id\": {",
									"            \"type\": \"string\"        }",
									"    }};",
									"",
									"var statusCode = pm.response.code;",
									"",
									"if (statusCode === 200) {",
									"    var jsonData = pm.response.json();",
									"",
									"    // validating status code",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    if (jsonData.success === true) {",
									"        // setting value of environment variable skillId",
									"        var skillId = jsonData.id;",
									"        pm.environment.set(\"skillId\", skillId);",
									"",
									"        // validating response schema",
									"        pm.test(\"Validate response schema\", function () {",
									"            pm.expect(jsonData.success).to.be.true;",
									"            pm.response.to.have.jsonSchema(schema);",
									"        });",
									"    } ",
									"    else if (jsonData.message === \"This skill is already exist in your skill list.\") {",
									"        pm.test(\"Validate duplicate skill not added\", function () {",
									"            pm.expect(jsonData.success).to.be.false;",
									"            pm.expect(jsonData.message).to.equal(\"This skill is already exist in your skill list.\");",
									"        });",
									"    }",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"PersonSkillId\": 0,\r\n  \"Skill\": \"C++\",\r\n  \"ExperienceLevel\": \"Intermediate\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:60190/profile/profile/addSkill",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"addSkill"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetSkill",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema ={\r",
									"  \"type\": \"array\",\r",
									"  \"items\": {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"      \"personSkillId\",\r",
									"      \"skill\",\r",
									"      \"experienceLevel\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"      \"personSkillId\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"skill\": {\r",
									"        \"type\": \"string\"\r",
									"      },\r",
									"      \"experienceLevel\": {\r",
									"        \"type\": \"string\"\r",
									"      }\r",
									"    }\r",
									"  }\r",
									"};\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // validating status code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"        // validating response schema\r",
									"    pm.test(\"Validate response schema\", function () {\r",
									"         pm.response.to.have.jsonSchema(schema);\r",
									"    });       \r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"schema\", '{}');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:60190/profile/profile/getSkill",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"getSkill"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateSkill",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"success\",\r",
									"        \"id\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"success\": {\r",
									"            \"type\": \"boolean\"        },\r",
									"        \"id\": {\r",
									"            \"type\": \"string\"        }\r",
									"    }};\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // validating status code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    if (jsonData.success === true) {\r",
									"\r",
									"        // validating response schema\r",
									"        pm.test(\"Validate response schema\", function () {\r",
									"            pm.expect(jsonData.success).to.be.true;\r",
									"            pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    }\r",
									"    else if (jsonData.message === \"This skill is already added to your skill list.\") {\r",
									"        pm.test(\"Validate duplicate skill not updated\", function () {\r",
									"            pm.expect(jsonData.success).to.be.false;\r",
									"            pm.expect(jsonData.message).to.equal(\"This skill is already added to your skill list.\");\r",
									"        });\r",
									"    }\r",
									"     else \r",
									"     {\r",
									"        pm.test(\"Error in updating skill\", function () {\r",
									"            pm.expect(jsonData.success).to.be.false;\r",
									"        });\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"   var schema ={\r",
									"  \"type\": \"object\",\r",
									"  \"required\": [\r",
									"    \"PersonSkillId\",\r",
									"    \"Skill\",\r",
									"    \"ExperienceLevel\"\r",
									"  ],\r",
									"  \"properties\": {\r",
									"    \"PersonSkillId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Skill\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"ExperienceLevel\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  }\r",
									"};\r",
									"\r",
									" var jsonString = JSON.stringify(schema);\r",
									" pm.environment.set(\"schema\", jsonString);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"PersonSkillId\": \"{{skillId}}\",\r\n  \"Skill\": \"Python\",\r\n  \"ExperienceLevel\": \"Intermediate\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:60190/profile/profile/updateSkill",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"updateSkill"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteSkill",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"success\",\r",
									"        \"skill\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"success\": {\r",
									"            \"type\": \"boolean\"\r",
									"        },\r",
									"        \"skill\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // validating status code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    if (jsonData.success === true) {\r",
									"        // validating response schema\r",
									"        pm.test(\"Validate response schema\", function () {\r",
									"            pm.expect(jsonData.success).to.be.true;\r",
									"            pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"   var schema ={\r",
									"  \"type\": \"object\",\r",
									"  \"required\": [\r",
									"    \"PersonSkillId\",\r",
									"    \"Skill\",\r",
									"    \"ExperienceLevel\"\r",
									"  ],\r",
									"  \"properties\": {\r",
									"    \"PersonSkillId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"Skill\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"ExperienceLevel\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  }\r",
									"};\r",
									"\r",
									" var jsonString = JSON.stringify(schema);\r",
									" pm.environment.set(\"schema\", jsonString);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"PersonSkillId\": \"{{skillId}}\",\r\n    \"Skill\": \"Python\",\r\n  \"ExperienceLevel\": \"Intermediate\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:60190/profile/profile/deleteSkill",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"deleteSkill"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Education",
			"item": [
				{
					"name": "AddEducation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema ={",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"success\",",
									"        \"id\"",
									"    ],",
									"    \"properties\": {",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        },",
									"        \"id\": {",
									"            \"type\": \"string\"        }",
									"    }};",
									"",
									"var statusCode = pm.response.code;",
									"",
									"if (statusCode === 200) {",
									"    var jsonData = pm.response.json();",
									"",
									"    // validating status code",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    if (jsonData.success === true) {",
									"        // setting value of environment variable educationId",
									"        var educationId = jsonData.id;",
									"        pm.environment.set(\"educationId\", educationId);",
									"",
									"        // validating response schema",
									"        pm.test(\"Validate response schema\", function () {",
									"            pm.expect(jsonData.success).to.be.true;",
									"            pm.response.to.have.jsonSchema(schema);",
									"        });",
									"    } ",
									"    else if (jsonData.message === \"This information is already exist.\") {",
									"        pm.test(\"Validate duplicate education not added\", function () {",
									"            pm.expect(jsonData.success).to.be.false;",
									"            pm.expect(jsonData.message).to.equal(\"This information is already exist.\");",
									"        });",
									"    }",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"   var schema ={\r",
									"  \"type\": \"object\",\r",
									"  \"required\": [\r",
									"    \"country\",\r",
									"    \"instituteName\",\r",
									"    \"title\",\r",
									"    \"degree\",\r",
									"    \"yearOfGraduation\"\r",
									"  ],\r",
									"  \"properties\": {\r",
									"    \"country\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"instituteName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"title\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"degree\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"yearOfGraduation\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  }\r",
									"};\r",
									" var jsonString = JSON.stringify(schema);\r",
									" pm.environment.set(\"schema\", jsonString);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"country\": \"Australia\",\r\n  \"instituteName\": \"LPU\",\r\n  \"title\": \"B.A\",\r\n  \"degree\": \"Graduation\",\r\n  \"yearOfGraduation\": \"2023\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:60190/profile/profile/addEducation",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"addEducation"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetEducation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema ={\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"success\",\r",
									"        \"education\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"success\": {\r",
									"            \"type\": \"boolean\"        },\r",
									"        \"education\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"object\",\r",
									"                \"required\": [\r",
									"                    \"id\",\r",
									"                    \"uId\",\r",
									"                    \"userId\",\r",
									"                    \"instituteName\",\r",
									"                    \"country\",\r",
									"                    \"title\",\r",
									"                    \"degree\",\r",
									"                    \"yearOfGraduation\",\r",
									"                    \"createdOn\",\r",
									"                    \"createdBy\",\r",
									"                    \"updatedOn\",\r",
									"                    \"updatedBy\",\r",
									"                    \"isDeleted\"\r",
									"                ],\r",
									"                \"properties\": {\r",
									"                    \"id\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"uId\": {\r",
									"                        \"type\": \"string\"                    },\r",
									"                    \"userId\": {\r",
									"                        \"type\": \"string\"                    },\r",
									"                    \"instituteName\": {\r",
									"                        \"type\": \"string\"                    },\r",
									"                    \"country\": {\r",
									"                        \"type\": \"string\"                    },\r",
									"                    \"title\": {\r",
									"                        \"type\": \"string\"                    },\r",
									"                    \"degree\": {\r",
									"                        \"type\": \"string\"                    },\r",
									"                    \"yearOfGraduation\": {\r",
									"                        \"type\": \"integer\"                    },\r",
									"                    \"createdOn\": {\r",
									"                        \"type\": \"string\"                    },\r",
									"                    \"createdBy\": {\r",
									"                        \"type\": \"string\"                    },\r",
									"                    \"updatedOn\": {\r",
									"                        \"type\": \"string\"                    },\r",
									"                    \"updatedBy\": {\r",
									"                        \"type\": \"string\"                    },\r",
									"                    \"isDeleted\": {\r",
									"                        \"type\": \"boolean\"                    }\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"};\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // validating status code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"     // validating response schema\r",
									"    pm.test(\"Validate response schema\", function () {\r",
									"        pm.response.to.have.jsonSchema(schema);\r",
									"    });\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"schema\", '{}');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:60190/profile/profile/getEducation",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"getEducation"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateEducation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"success\",\r",
									"        \"message\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"success\": {\r",
									"            \"type\": \"boolean\"        },\r",
									"        \"message\": {\r",
									"            \"type\": \"string\"        }\r",
									"    }};\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // validating status code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    if (jsonData.success === true) {\r",
									"\r",
									"        // validating response schema\r",
									"        pm.test(\"Validate response schema\", function () {\r",
									"            pm.expect(jsonData.success).to.be.true;\r",
									"            pm.expect(jsonData.message).to.eql(\"Education Updated Successfully\");\r",
									"            pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    }\r",
									"    else if (jsonData.message === \"This information is already exist.\") {\r",
									"        pm.test(\"Validate duplicate education not updated\", function () {\r",
									"            pm.expect(jsonData.success).to.be.false;\r",
									"            pm.expect(jsonData.message).to.equal(\"This information is already exist.\");\r",
									"        });\r",
									"    }\r",
									"    else {\r",
									"        pm.test(\"Error in updating education\", function () {\r",
									"            pm.expect(jsonData.success).to.be.false;\r",
									"        });\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"   var schema ={\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"id\",\r",
									"        \"country\",\r",
									"        \"instituteName\",\r",
									"        \"degree\",\r",
									"        \"title\",\r",
									"        \"yearOfGraduation\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"id\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"country\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"instituteName\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"degree\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"title\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"yearOfGraduation\": {\r",
									"            \"type\": \"integer\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									" var jsonString = JSON.stringify(schema);\r",
									" pm.environment.set(\"schema\", jsonString);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"65ffdac87421900001096c3c\",\r\n  \"country\": \"India\",\r\n  \"instituteName\": \"GPU\",\r\n  \"degree\": \"IIM\",\r\n  \"title\": \"BFA\",\r\n  \"yearOfGraduation\": 2017\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:60190/profile/profile/updateEducation",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"updateEducation"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteEducation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"success\",\r",
									"        \"message\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"success\": {\r",
									"            \"type\": \"boolean\"\r",
									"        },\r",
									"        \"message\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // validating status code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    if (jsonData.success === true) {\r",
									"        // validating response schema\r",
									"        pm.test(\"Validate schema\", function () {\r",
									"            pm.expect(jsonData.success).to.be.true;\r",
									"            pm.expect(jsonData.message).to.eql(\"Education Deleted Successfully\");\r",
									"            pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"   var schema ={\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"id\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"id\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									" var jsonString = JSON.stringify(schema);\r",
									" pm.environment.set(\"schema\", jsonString);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"{{educationId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:60190/profile/profile/deleteEducation",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"deleteEducation"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Certification",
			"item": [
				{
					"name": "AddCertification",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"   var schema ={\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"certificationName\",\r",
									"        \"certificationFrom\",\r",
									"        \"certificationYear\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"certificationName\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"certificationFrom\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"certificationYear\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									" var jsonString = JSON.stringify(schema);\r",
									" pm.environment.set(\"schema\", jsonString);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema ={",
									"    \"type\": \"object\",",
									"    \"required\": [",
									"        \"success\",",
									"        \"id\"",
									"    ],",
									"    \"properties\": {",
									"        \"success\": {",
									"            \"type\": \"boolean\"",
									"        },",
									"        \"id\": {",
									"            \"type\": \"string\"        }",
									"    }};",
									"",
									"var statusCode = pm.response.code;",
									"",
									"if (statusCode === 200) {",
									"    var jsonData = pm.response.json();",
									"",
									"    // validating status code",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"",
									"    if (jsonData.success === true) {",
									"        // setting value of environment variable certificationId",
									"        var certificationId = jsonData.id;",
									"        pm.environment.set(\"certificationId\", certificationId);",
									"",
									"        // validating response schema",
									"        pm.test(\"Validate response schema\", function () {",
									"            pm.expect(jsonData.success).to.be.true;",
									"            pm.response.to.have.jsonSchema(schema);",
									"        });",
									"    } ",
									"    else if (jsonData.message === \"This information is already exist.\") {",
									"        pm.test(\"Validate duplicate certification not added\", function () {",
									"            pm.expect(jsonData.success).to.be.false;",
									"            pm.expect(jsonData.message).to.equal(\"This information is already exist.\");",
									"        });",
									"    }",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"certificationName\": \"ISTQB\",\r\n  \"certificationFrom\": \"ISTQB\",\r\n  \"certificationYear\": \"2021\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:60190/profile/profile/addCertification",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"addCertification"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetCertification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema ={\r",
									"    \"type\": \"array\",\r",
									"    \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"required\": [\r",
									"            \"id\",\r",
									"            \"certificationName\",\r",
									"            \"certificationFrom\",\r",
									"            \"certificationYear\"\r",
									"        ],\r",
									"        \"properties\": {\r",
									"            \"id\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"certificationName\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"certificationFrom\": {\r",
									"                \"type\": \"string\"\r",
									"            },\r",
									"            \"certificationYear\": {\r",
									"                \"type\": \"integer\"\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"};\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // validating status code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    // validating response schema\r",
									"     pm.test(\"Validate schema\", function () {\r",
									"        pm.response.to.have.jsonSchema(schema);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"schema\", '{}');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:60190/profile/profile/getCertification",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"getCertification"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateCertification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema ={\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"success\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"success\": {\r",
									"            \"type\": \"boolean\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // validating status code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    if (jsonData.success === true) {\r",
									"        // validating response schema\r",
									"        pm.test(\"Validate response schema\", function () {\r",
									"            pm.expect(jsonData.success).to.be.true;\r",
									"            pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    }\r",
									"    else if (jsonData.message === \"This information is already exist.\") {\r",
									"        pm.test(\"Validate duplicate certification not updated\", function () {\r",
									"            pm.expect(jsonData.success).to.be.false;\r",
									"            pm.expect(jsonData.message).to.equal(\"This information is already exist.\");\r",
									"        });\r",
									"    }\r",
									"    else {\r",
									"        pm.test(\"Error in updating certification\", function () {\r",
									"            pm.expect(jsonData.success).to.be.false;\r",
									"        });\r",
									"    }\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"   var schema ={\r",
									" \"type\": \"object\",\r",
									"  \"required\": [\r",
									"    \"id\",\r",
									"    \"certificationName\",\r",
									"    \"certificationFrom\",\r",
									"    \"certificationYear\"\r",
									"  ],\r",
									"  \"properties\": {\r",
									"    \"id\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"certificationName\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"certificationFrom\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"certificationYear\": {\r",
									"      \"type\": \"string\"\r",
									"    }\r",
									"  }\r",
									"};\r",
									" var jsonString = JSON.stringify(schema);\r",
									" pm.environment.set(\"schema\", jsonString);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"{{certificationId}}\",\r\n  \"certificationName\": \"Dot Net\",\r\n  \"certificationFrom\": \"Dot Net\",\r\n  \"certificationYear\": \"2019\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:60190/profile/profile/updateCertification",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"updateCertification"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteCertification",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema ={\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"success\",\r",
									"        \"certificationName\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"success\": {\r",
									"            \"type\": \"boolean\"\r",
									"        },\r",
									"        \"certificationName\": {\r",
									"            \"type\": \"string\"   }\r",
									"    }};\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // validating status code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    // validating response schema\r",
									"    pm.test(\"Validate response schema\", function () {\r",
									"        pm.expect(jsonData.success).to.be.true;\r",
									"        pm.response.to.have.jsonSchema(schema);\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"   var schema ={\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"id\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"id\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									" var jsonString = JSON.stringify(schema);\r",
									" pm.environment.set(\"schema\", jsonString);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": \"{{certificationId}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:60190/profile/profile/deleteCertification",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"deleteCertification"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Listing",
			"item": [
				{
					"name": "GetCategories",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"schema\", '{}');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var schema ={\r",
									"  \"type\": \"object\",\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"categories\"\r",
									"  ],\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"categories\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"required\": [\r",
									"          \"id\",\r",
									"          \"value\",\r",
									"          \"name\",\r",
									"          \"subcategory\",\r",
									"          \"isDeleted\"\r",
									"        ],\r",
									"        \"properties\": {\r",
									"          \"id\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"value\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"name\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"subcategory\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"              \"type\": \"object\",\r",
									"              \"required\": [\r",
									"                \"id\",\r",
									"                \"value\",\r",
									"                \"name\",\r",
									"                \"isDeleted\"\r",
									"              ],\r",
									"              \"properties\": {\r",
									"                \"id\": {\r",
									"                  \"type\": \"null\"\r",
									"                },\r",
									"                \"value\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"name\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"isDeleted\": {\r",
									"                  \"type\": \"boolean\"\r",
									"                }\r",
									"              }\r",
									"            }\r",
									"          },\r",
									"          \"isDeleted\": {\r",
									"            \"type\": \"boolean\"\r",
									"          }\r",
									"        }\r",
									"      }\r",
									"    }\r",
									"  }\r",
									"};\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // validating status code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    if (jsonData.success === true) {}\r",
									"        // validating response schema\r",
									"        pm.test(\"Validate response schema\", function () {\r",
									"            pm.expect(jsonData.success).to.be.true;\r",
									"            pm.response.to.have.jsonSchema(schema);\r",
									"        });      \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:51689/listing/listing/getCategories",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "51689",
							"path": [
								"listing",
								"listing",
								"getCategories"
							]
						}
					},
					"response": []
				},
				{
					"name": "SearchListings",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"  var schema ={\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"terms\",\r",
									"        \"sortPagination\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"terms\": {\r",
									"            \"type\": \"object\",\r",
									"            \"required\": [\r",
									"                \"searchString\",\r",
									"                \"categoryIndex\",\r",
									"                \"subcategoryIndex\",\r",
									"                \"uId\"\r",
									"            ],\r",
									"            \"properties\": {\r",
									"                \"searchString\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"categoryIndex\": {\r",
									"                    \"type\":  [\r",
									"                        \"null\",\r",
									"                        \"integer\"\r",
									"                        ]\r",
									"                },\r",
									"                \"subcategoryIndex\": {\r",
									"                    \"type\": [\r",
									"                        \"null\",\r",
									"                        \"integer\"\r",
									"                        ]\r",
									"                },\r",
									"                \"uId\": {\r",
									"                    \"type\": [\r",
									"                        \"null\",\r",
									"                        \"string\"\r",
									"                        ]\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"sortPagination\": {\r",
									"            \"type\": \"object\",\r",
									"            \"default\": {},\r",
									"            \"title\": \"The sortPagination Schema\",\r",
									"            \"required\": [\r",
									"                \"offset\",\r",
									"                \"limit\"\r",
									"            ],\r",
									"            \"properties\": {\r",
									"                \"offset\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"limit\": {\r",
									"                    \"type\": \"integer\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"};\r",
									" var jsonString = JSON.stringify(schema);\r",
									" pm.environment.set(\"schema\", jsonString);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema ={\r",
									"  \"type\": \"object\",\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"data\",\r",
									"    \"totalCount\"\r",
									"  ],\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"required\": [\r",
									"          \"id\",\r",
									"          \"sellerId\",\r",
									"          \"sellerName\",\r",
									"          \"sellerFirstName\",\r",
									"          \"sellerLastName\",\r",
									"          \"profilePictureId\",\r",
									"          \"samplePictureId\",\r",
									"          \"photoSrc\",\r",
									"          \"samplePhotoSrc\",\r",
									"          \"charge\",\r",
									"          \"title\",\r",
									"          \"description\",\r",
									"          \"categoryId\",\r",
									"          \"subcategoryId\",\r",
									"          \"serviceType\",\r",
									"          \"isTradable\",\r",
									"          \"skillTrade\",\r",
									"          \"locationType\",\r",
									"          \"ratings\"\r",
									"        ],\r",
									"        \"properties\": {\r",
									"          \"id\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"sellerId\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"sellerName\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"sellerFirstName\": {\r",
									"            \"type\": \"null\"\r",
									"          },\r",
									"          \"sellerLastName\": {\r",
									"            \"type\": \"null\"\r",
									"          },\r",
									"          \"profilePictureId\": {\r",
									"            \"type\": \"null\"\r",
									"          },\r",
									"          \"samplePictureId\": {\r",
									"            \"type\": [\r",
									"              \"null\",\r",
									"              \"string\"\r",
									"            ]\r",
									"          },\r",
									"          \"photoSrc\": {\r",
									"            \"type\": \"null\"\r",
									"          },\r",
									"          \"samplePhotoSrc\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"charge\": {\r",
									"            \"type\": \"number\"\r",
									"          },\r",
									"          \"title\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"description\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"categoryId\": {\r",
									"            \"type\": \"integer\"\r",
									"          },\r",
									"          \"subcategoryId\": {\r",
									"            \"type\": \"integer\"\r",
									"          },\r",
									"          \"serviceType\": {\r",
									"            \"type\": \"integer\"\r",
									"          },\r",
									"          \"isTradable\": {\r",
									"            \"type\": \"boolean\"\r",
									"          },\r",
									"          \"skillTrade\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"              \"type\": \"object\",\r",
									"              \"required\": [\r",
									"                \"id\",\r",
									"                \"text\"\r",
									"              ],\r",
									"              \"properties\": {\r",
									"                \"id\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"text\": {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              }\r",
									"            }\r",
									"          },\r",
									"          \"locationType\": {\r",
									"            \"type\": \"integer\"\r",
									"          },\r",
									"          \"ratings\": {\r",
									"            \"type\": [\r",
									"              \"null\",\r",
									"              \"array\"\r",
									"            ]\r",
									"          }\r",
									"        }\r",
									"      }\r",
									"    },\r",
									"    \"totalCount\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  }\r",
									"};\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // validating status code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    if (jsonData.success === true) {\r",
									"        // validating response schema\r",
									"        pm.test(\"Validate response schema\", function () {\r",
									"            pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    }\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"terms\": {\r\n    \"searchString\": \"\",\r\n    \"categoryIndex\": null,\r\n    \"subcategoryIndex\": null,\r\n    \"uId\": null\r\n  },\r\n  \"sortPagination\": {\r\n    \"offset\": 0,\r\n    \"limit\": 9\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:51689/listing/listing/searchListings",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "51689",
							"path": [
								"listing",
								"listing",
								"searchListings"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetServiceCategoryCount",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema ={\r",
									" \"type\": \"object\",\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"data\"\r",
									"  ],\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"required\": [\r",
									"          \"categoryId\",\r",
									"          \"subcategoryId\",\r",
									"          \"count\"\r",
									"        ],\r",
									"        \"properties\": {\r",
									"          \"categoryId\": {\r",
									"            \"type\": \"integer\"\r",
									"          },\r",
									"          \"subcategoryId\": {\r",
									"            \"type\": \"integer\"\r",
									"          },\r",
									"          \"count\": {\r",
									"            \"type\": \"integer\"\r",
									"          }\r",
									"        }\r",
									"      }\r",
									"    }\r",
									"  }\r",
									"};\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // validating status code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    if (jsonData.success === true) {\r",
									"        // validating response schema\r",
									"        pm.test(\"Validate response schema\", function () {\r",
									"            pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    } \r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"  var schema ={\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"terms\",\r",
									"        \"sortPagination\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"terms\": {\r",
									"            \"type\": \"object\",\r",
									"            \"required\": [\r",
									"                \"searchString\",\r",
									"                \"categoryIndex\",\r",
									"                \"subcategoryIndex\",\r",
									"                \"uId\"\r",
									"            ],\r",
									"            \"properties\": {\r",
									"                \"searchString\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"categoryIndex\": {\r",
									"                    \"type\":  [\r",
									"                        \"null\",\r",
									"                        \"integer\"\r",
									"                        ]\r",
									"                },\r",
									"                \"subcategoryIndex\": {\r",
									"                    \"type\": [\r",
									"                        \"null\",\r",
									"                        \"integer\"\r",
									"                        ]\r",
									"                },\r",
									"                \"uId\": {\r",
									"                    \"type\": [\r",
									"                        \"null\",\r",
									"                        \"string\"\r",
									"                        ]\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"sortPagination\": {\r",
									"            \"type\": \"object\",\r",
									"            \"default\": {},\r",
									"            \"title\": \"The sortPagination Schema\",\r",
									"            \"required\": [\r",
									"                \"offset\",\r",
									"                \"limit\"\r",
									"            ],\r",
									"            \"properties\": {\r",
									"                \"offset\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"limit\": {\r",
									"                    \"type\": \"integer\"\r",
									"                }\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"};\r",
									" var jsonString = JSON.stringify(schema);\r",
									" pm.environment.set(\"schema\", jsonString);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"terms\": {\r\n    \"searchString\": \"\",\r\n    \"categoryIndex\": null,\r\n    \"subcategoryIndex\": null,\r\n    \"uId\": null\r\n  },\r\n  \"sortPagination\": {\r\n    \"offset\": 0,\r\n    \"limit\": 9\r\n  }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:51689/listing/listing/GetServiceCategoryCount",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "51689",
							"path": [
								"listing",
								"listing",
								"GetServiceCategoryCount"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetBalance",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"schema\", '{}');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema ={\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"success\",\r",
									"        \"balance\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"success\": {\r",
									"            \"type\": \"boolean\"\r",
									"        },\r",
									"        \"balance\": {\r",
									"            \"type\": \"number\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // validating status code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    if (jsonData.success === true) {\r",
									"        // validating response schema\r",
									"        pm.test(\"Validate response schema\", function () {\r",
									"            pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    }\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:51689/listing/listing/getBalance",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "51689",
							"path": [
								"listing",
								"listing",
								"getBalance"
							]
						}
					},
					"response": []
				},
				{
					"name": "AddListing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema ={\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"success\",\r",
									"        \"id\",\r",
									"        \"editFlag\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"success\": {\r",
									"            \"type\": \"boolean\"        },\r",
									"        \"id\": {\r",
									"            \"type\": \"string\"        },\r",
									"        \"editFlag\": {\r",
									"            \"type\": \"boolean\"        }\r",
									"    }};\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // validating status code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    if (jsonData.success === true) {\r",
									"        // setting value of environment variable listId\r",
									"        var listId = jsonData.id;\r",
									"        pm.environment.set(\"listId\", listId);\r",
									"\r",
									"        // validating response schema\r",
									"        pm.test(\"Validate response schema\", function () {\r",
									"            pm.expect(jsonData.success).to.be.true;\r",
									"            pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    } \r",
									"    else if (jsonData.message === \"Object reference not set to an instance of an object.\") {\r",
									"        pm.test(\"Validate invalid skill not added\", function () {\r",
									"            pm.expect(jsonData.success).to.be.false;\r",
									"            pm.expect(jsonData.message).to.equal(\"Object reference not set to an instance of an object.\");\r",
									"        });\r",
									"    }\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"  var schema ={\r",
									"  \"type\": \"object\",\r",
									"  \"required\": [\r",
									"    \"title\",\r",
									"    \"description\",\r",
									"    \"categoryId\",\r",
									"    \"subcategoryId\",\r",
									"    \"tags\",\r",
									"    \"serviceType\",\r",
									"    \"locationType\",\r",
									"    \"availability\",\r",
									"    \"skillTrade\",\r",
									"    \"isTradable\",\r",
									"    \"charge\",\r",
									"    \"credentials\",\r",
									"    \"isActive\"\r",
									"  ],\r",
									"  \"properties\": {\r",
									"    \"title\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"description\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"categoryId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"subcategoryId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"tags\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"required\": [\r",
									"          \"id\",\r",
									"          \"text\"\r",
									"        ],\r",
									"        \"properties\": {\r",
									"          \"id\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"text\": {\r",
									"            \"type\": \"string\"\r",
									"          }\r",
									"        }\r",
									"      }\r",
									"    },\r",
									"    \"serviceType\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"locationType\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"availability\": {\r",
									"      \"type\": \"object\",\r",
									"      \"required\": [\r",
									"        \"startDate\",\r",
									"        \"endDate\",\r",
									"        \"dayEntries\"\r",
									"      ],\r",
									"      \"properties\": {\r",
									"        \"startDate\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"endDate\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"dayEntries\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {\r",
									"            \"type\": \"object\",\r",
									"            \"required\": [\r",
									"              \"StartTime\",\r",
									"              \"EndTime\",\r",
									"              \"Available\"\r",
									"            ],\r",
									"            \"properties\": {\r",
									"              \"StartTime\": {\r",
									"                \"type\": \"string\"\r",
									"              },\r",
									"              \"EndTime\": {\r",
									"                \"type\": \"string\"\r",
									"              },\r",
									"              \"Available\": {\r",
									"                \"type\": \"boolean\"\r",
									"              }\r",
									"            }\r",
									"          }\r",
									"        }\r",
									"      }\r",
									"    },\r",
									"    \"skillTrade\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"required\": [\r",
									"          \"id\",\r",
									"          \"text\"\r",
									"        ],\r",
									"        \"properties\": {\r",
									"          \"id\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"text\": {\r",
									"            \"type\": \"string\"\r",
									"          }\r",
									"        }\r",
									"      }\r",
									"    },\r",
									"    \"isTradable\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"charge\": {\r",
									"      \"type\": \"integer\"\r",
									"    },\r",
									"    \"credentials\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"isActive\": {\r",
									"      \"type\": \"boolean\"\r",
									"    }\r",
									"  }\r",
									"};\r",
									" var jsonString = JSON.stringify(schema);\r",
									" pm.environment.set(\"schema\", jsonString);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"title\": \"test16\",\r\n  \"description\": \"test16\",\r\n  \"categoryId\": \"2\",\r\n  \"subcategoryId\": \"2\",\r\n  \"tags\": [\r\n    {\r\n      \"id\": \"hghd\",\r\n      \"text\": \"hghd\"\r\n    }\r\n  ],\r\n  \"serviceType\": 0,\r\n  \"locationType\": 1,\r\n  \"availability\": {\r\n    \"startDate\": \"2024-03-29\",\r\n    \"endDate\": \"2024-04-04\",\r\n    \"dayEntries\": [\r\n      {\r\n        \"StartTime\": \"\",\r\n        \"EndTime\": \"\",\r\n        \"Available\": false\r\n      },\r\n      {\r\n        \"StartTime\": \"21:43\",\r\n        \"EndTime\": \"22:43\",\r\n        \"Available\": false\r\n      },\r\n      {\r\n        \"StartTime\": \"\",\r\n        \"EndTime\": \"\",\r\n        \"Available\": false\r\n      },\r\n      {\r\n        \"StartTime\": \"\",\r\n        \"EndTime\": \"\",\r\n        \"Available\": false\r\n      },\r\n      {\r\n        \"StartTime\": \"\",\r\n        \"EndTime\": \"\",\r\n        \"Available\": false\r\n      },\r\n      {\r\n        \"StartTime\": \"\",\r\n        \"EndTime\": \"\",\r\n        \"Available\": false\r\n      },\r\n      {\r\n        \"StartTime\": \"\",\r\n        \"EndTime\": \"\",\r\n        \"Available\": false\r\n      }\r\n    ]\r\n  },\r\n  \"skillTrade\": [\r\n    {\r\n      \"id\": \"dgf\",\r\n      \"text\": \"dgf\"\r\n    }\r\n  ],\r\n  \"isTradable\": true,\r\n  \"charge\": 0,\r\n  \"credentials\": true,\r\n  \"isActive\": true\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:51689/listing/listing/addListing",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "51689",
							"path": [
								"listing",
								"listing",
								"addListing"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetService",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"var schema ={\r",
									"  \"type\": \"object\",\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"serviceListing\",\r",
									"    \"categoryTuple\",\r",
									"    \"currentUserId\",\r",
									"    \"comments\"\r",
									"  ],\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"serviceListing\": {\r",
									"      \"type\": \"object\",\r",
									"      \"required\": [\r",
									"        \"id\",\r",
									"        \"sellerId\",\r",
									"        \"charge\",\r",
									"        \"title\",\r",
									"        \"description\",\r",
									"        \"serviceType\",\r",
									"        \"locationType\",\r",
									"        \"availability\",\r",
									"        \"workSample\",\r",
									"        \"categoryId\",\r",
									"        \"subcategoryId\",\r",
									"        \"tags\",\r",
									"        \"comments\",\r",
									"        \"ratings\",\r",
									"        \"ratingAverages\",\r",
									"        \"ratingTotalsAndCounts\",\r",
									"        \"skillTrade\",\r",
									"        \"isTradable\",\r",
									"        \"isActive\",\r",
									"        \"createdOn\",\r",
									"        \"createdBy\",\r",
									"        \"updatedOn\",\r",
									"        \"updatedBy\",\r",
									"        \"isDeleted\"\r",
									"      ],\r",
									"      \"properties\": {\r",
									"        \"id\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"sellerId\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"charge\": {\r",
									"          \"type\": \"number\"\r",
									"        },\r",
									"        \"title\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"description\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"serviceType\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"locationType\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"availability\": {\r",
									"          \"type\": \"object\",\r",
									"          \"required\": [\r",
									"            \"startDate\",\r",
									"            \"endDate\",\r",
									"            \"dayEntries\"\r",
									"          ],\r",
									"          \"properties\": {\r",
									"            \"startDate\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"endDate\": {\r",
									"              \"type\": \"string\"\r",
									"            },\r",
									"            \"dayEntries\": {\r",
									"              \"type\": \"array\",\r",
									"              \"items\": {\r",
									"                \"type\": \"object\",\r",
									"                \"required\": [\r",
									"                  \"startTime\",\r",
									"                  \"endTime\",\r",
									"                  \"available\"\r",
									"                ],\r",
									"                \"properties\": {\r",
									"                  \"startTime\": {\r",
									"                    \"type\": \"string\"\r",
									"                  },\r",
									"                  \"endTime\": {\r",
									"                    \"type\": \"string\"\r",
									"                  },\r",
									"                  \"available\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                  }\r",
									"                }\r",
									"              }\r",
									"            }\r",
									"          }\r",
									"        },\r",
									"        \"workSample\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"categoryId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"subcategoryId\": {\r",
									"          \"type\": \"integer\"\r",
									"        },\r",
									"        \"tags\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {\r",
									"            \"type\": \"object\",\r",
									"            \"required\": [\r",
									"              \"id\",\r",
									"              \"text\"\r",
									"            ],\r",
									"            \"properties\": {\r",
									"              \"id\": {\r",
									"                \"type\": \"string\"\r",
									"              },\r",
									"              \"text\": {\r",
									"                \"type\": \"string\"\r",
									"              }\r",
									"            }\r",
									"          }\r",
									"        },\r",
									"        \"comments\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"ratings\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"ratingAverages\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"ratingTotalsAndCounts\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"skillTrade\": {\r",
									"          \"type\": \"array\",\r",
									"          \"items\": {\r",
									"            \"type\": \"object\",\r",
									"            \"required\": [\r",
									"              \"id\",\r",
									"              \"text\"\r",
									"            ],\r",
									"            \"properties\": {\r",
									"              \"id\": {\r",
									"                \"type\": \"string\"\r",
									"              },\r",
									"              \"text\": {\r",
									"                \"type\": \"string\"\r",
									"              }\r",
									"            }\r",
									"          }\r",
									"        },\r",
									"        \"isTradable\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"isActive\": {\r",
									"          \"type\": \"boolean\"\r",
									"        },\r",
									"        \"createdOn\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"createdBy\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"updatedOn\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"updatedBy\": {\r",
									"          \"type\": \"null\"\r",
									"        },\r",
									"        \"isDeleted\": {\r",
									"          \"type\": \"boolean\"\r",
									"        }\r",
									"      }\r",
									"    },\r",
									"    \"categoryTuple\": {\r",
									"      \"type\": \"object\",\r",
									"      \"required\": [\r",
									"        \"item1\",\r",
									"        \"item2\"\r",
									"      ],\r",
									"      \"properties\": {\r",
									"        \"item1\": {\r",
									"          \"type\": \"string\"\r",
									"        },\r",
									"        \"item2\": {\r",
									"          \"type\": \"string\"\r",
									"        }\r",
									"      }\r",
									"    },\r",
									"    \"currentUserId\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"comments\": {\r",
									"      \"type\": \"null\"\r",
									"    }\r",
									"  }\r",
									"};\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // validating status code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    if (jsonData.success === true) {\r",
									"\r",
									"        // validating response schema\r",
									"        pm.test(\"Validate response schema\", function () {\r",
									"            pm.expect(jsonData.success).to.be.true;\r",
									"            pm.response.to.have.jsonSchema(schema);\r",
									"        });      \r",
									"}\r",
									"    if (jsonData.success === false) {\r",
									"        // validating request failed\r",
									"        pm.test(\"Request failed\", function () {\r",
									"            pm.expect(jsonData.success).to.be.false;\r",
									"        }); \r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"schema\", '{}');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:51689/listing/listing/getService?id={{listId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "51689",
							"path": [
								"listing",
								"listing",
								"getService"
							],
							"query": [
								{
									"key": "id",
									"value": "{{listId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetMultipleServiceListing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"  var schema ={\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"offset\",\r",
									"        \"limit\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"offset\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"limit\": {\r",
									"            \"type\": \"integer\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									" var jsonString = JSON.stringify(schema);\r",
									" pm.environment.set(\"schema\", jsonString);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema ={\r",
									"  \"type\": \"object\",\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"data\",\r",
									"    \"count\"\r",
									"  ],\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"required\": [\r",
									"          \"id\",\r",
									"          \"sellerId\",\r",
									"          \"charge\",\r",
									"          \"title\",\r",
									"          \"description\",\r",
									"          \"categoryId\",\r",
									"          \"category\",\r",
									"          \"subcategoryId\",\r",
									"          \"serviceType\",\r",
									"          \"locationType\",\r",
									"          \"availability\",\r",
									"          \"isTradable\",\r",
									"          \"isActive\",\r",
									"          \"tags\",\r",
									"          \"skillTrade\",\r",
									"          \"worksample\",\r",
									"          \"createdOn\",\r",
									"          \"createdBy\",\r",
									"          \"updatedOn\",\r",
									"          \"updatedBy\",\r",
									"          \"comments\",\r",
									"          \"ratingTotalsAndCounts\",\r",
									"          \"workSampleMainImg\",\r",
									"          \"isDeleted\"\r",
									"        ],\r",
									"        \"properties\": {\r",
									"          \"id\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"sellerId\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"charge\": {\r",
									"            \"type\": \"number\"\r",
									"          },\r",
									"          \"title\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"description\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"categoryId\": {\r",
									"            \"type\": \"integer\"\r",
									"          },\r",
									"          \"category\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"subcategoryId\": {\r",
									"            \"type\": \"integer\"\r",
									"          },\r",
									"          \"serviceType\": {\r",
									"            \"type\": \"integer\"\r",
									"          },\r",
									"          \"locationType\": {\r",
									"            \"type\": \"integer\"\r",
									"          },\r",
									"          \"availability\": {\r",
									"            \"type\": \"object\",\r",
									"            \"required\": [\r",
									"              \"startDate\",\r",
									"              \"endDate\",\r",
									"              \"dayEntries\"\r",
									"            ],\r",
									"            \"properties\": {\r",
									"              \"startDate\": {\r",
									"                \"type\": \"string\"\r",
									"              },\r",
									"              \"endDate\": {\r",
									"                \"type\": [\r",
									"                        \"null\",\r",
									"                        \"string\"\r",
									"                        ]\r",
									"              },\r",
									"              \"dayEntries\": {\r",
									"                \"type\": \"array\",\r",
									"                \"items\": {\r",
									"                  \"type\": \"object\",\r",
									"                  \"required\": [\r",
									"                    \"startTime\",\r",
									"                    \"endTime\",\r",
									"                    \"available\"\r",
									"                  ],\r",
									"                  \"properties\": {\r",
									"                    \"startTime\": {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    \"endTime\": {\r",
									"                      \"type\": \"string\"\r",
									"                    },\r",
									"                    \"available\": {\r",
									"                      \"type\": \"boolean\"\r",
									"                    }\r",
									"                  }\r",
									"                }\r",
									"              }\r",
									"            }\r",
									"          },\r",
									"          \"isTradable\": {\r",
									"            \"type\": \"boolean\"\r",
									"          },\r",
									"          \"isActive\": {\r",
									"            \"type\": \"boolean\"\r",
									"          },\r",
									"          \"tags\": {\r",
									"            \"type\": \"null\"\r",
									"          },\r",
									"          \"skillTrade\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"              \"type\": \"object\",\r",
									"              \"required\": [\r",
									"                \"id\",\r",
									"                \"text\"\r",
									"              ],\r",
									"              \"properties\": {\r",
									"                \"id\": {\r",
									"                  \"type\": \"string\"\r",
									"                },\r",
									"                \"text\": {\r",
									"                  \"type\": \"string\"\r",
									"                }\r",
									"              }\r",
									"            }\r",
									"          },\r",
									"          \"worksample\": {\r",
									"            \"type\": \"null\"\r",
									"          },\r",
									"          \"createdOn\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"createdBy\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"updatedOn\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"updatedBy\": {\r",
									"            \"type\": \"null\"\r",
									"          },\r",
									"          \"comments\": {\r",
									"            \"type\": \"null\"\r",
									"          },\r",
									"          \"ratingTotalsAndCounts\": {\r",
									"            \"type\": \"null\"\r",
									"          },\r",
									"          \"workSampleMainImg\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"isDeleted\": {\r",
									"            \"type\": \"boolean\"\r",
									"          }\r",
									"        }\r",
									"      }\r",
									"    },\r",
									"    \"count\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  }\r",
									"};\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // validating status code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    if (jsonData.success === true) {\r",
									"\r",
									"        // setting value of environment sellerId\r",
									"        var sellerId = jsonData.data[0].sellerId;\r",
									"        pm.environment.set(\"sellerId\", sellerId);\r",
									"        \r",
									"        // validating response schema\r",
									"        pm.test(\"Validate response schema\", function () {\r",
									"            pm.expect(jsonData.success).to.be.true;\r",
									"            pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    } \r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"offset\": 0,\r\n  \"limit\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:51689/listing/listing/getMultipleServiceListing",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "51689",
							"path": [
								"listing",
								"listing",
								"getMultipleServiceListing"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetSentRequest",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"schema\", '{}');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema ={\r",
									"  \"type\": \"object\",\r",
									"  \"required\": [\r",
									"    \"success\",\r",
									"    \"data\"\r",
									"  ],\r",
									"  \"properties\": {\r",
									"    \"success\": {\r",
									"      \"type\": \"boolean\"\r",
									"    },\r",
									"    \"data\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": {\r",
									"        \"type\": \"object\",\r",
									"        \"required\": [\r",
									"          \"id\",\r",
									"          \"senderId\",\r",
									"          \"senderName\",\r",
									"          \"recipientId\",\r",
									"          \"recipientName\",\r",
									"          \"listingId\",\r",
									"          \"totalHours\",\r",
									"          \"totalAmount\",\r",
									"          \"status\",\r",
									"          \"isViewed\",\r",
									"          \"isCompletedBySender\",\r",
									"          \"isCompletedBySeller\",\r",
									"          \"category\",\r",
									"          \"categoryId\",\r",
									"          \"title\",\r",
									"          \"message\",\r",
									"          \"senderLastName\",\r",
									"          \"senderCity\",\r",
									"          \"senderCountry\",\r",
									"          \"createdOn\",\r",
									"          \"updatedOn\",\r",
									"          \"isTradable\"\r",
									"        ],\r",
									"        \"properties\": {\r",
									"          \"id\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"senderId\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"senderName\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"recipientId\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"recipientName\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"listingId\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"totalHours\": {\r",
									"            \"type\": \"number\"\r",
									"          },\r",
									"          \"totalAmount\": {\r",
									"            \"type\": \"number\"\r",
									"          },\r",
									"          \"status\": {\r",
									"            \"type\": \"integer\"\r",
									"          },\r",
									"          \"isViewed\": {\r",
									"            \"type\": \"boolean\"\r",
									"          },\r",
									"          \"isCompletedBySender\": {\r",
									"            \"type\": \"boolean\"\r",
									"          },\r",
									"          \"isCompletedBySeller\": {\r",
									"            \"type\": \"boolean\"\r",
									"          },\r",
									"          \"category\": {\r",
									"            \"type\": \"null\"\r",
									"          },\r",
									"          \"categoryId\": {\r",
									"            \"type\": \"integer\"\r",
									"          },\r",
									"          \"title\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"message\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"senderLastName\": {\r",
									"            \"type\": \"null\"\r",
									"          },\r",
									"          \"senderCity\": {\r",
									"            \"type\": \"null\"\r",
									"          },\r",
									"          \"senderCountry\": {\r",
									"            \"type\": \"null\"\r",
									"          },\r",
									"          \"createdOn\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"updatedOn\": {\r",
									"            \"type\": \"string\"\r",
									"          },\r",
									"          \"isTradable\": {\r",
									"            \"type\": \"boolean\"\r",
									"          }\r",
									"        }\r",
									"      }\r",
									"    }\r",
									"  }\r",
									"};\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // validating status code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    if (jsonData.success === true)\r",
									"    {   \r",
									"        // validating response schema\r",
									"        pm.test(\"Validate response schema\", function () {\r",
									"            pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:51689/listing/listing/getSentRequests",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "51689",
							"path": [
								"listing",
								"listing",
								"getSentRequests"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetTradeRequests",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"  var schema ={\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"offset\",\r",
									"        \"limit\",\r",
									"        \"sortBy\",\r",
									"        \"direction\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"offset\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"limit\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"sortBy\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"direction\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									" var jsonString = JSON.stringify(schema);\r",
									" pm.environment.set(\"schema\", jsonString);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"success\",\r",
									"        \"data\",\r",
									"        \"totalCount\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"success\": {\r",
									"            \"type\": \"boolean\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"object\",\r",
									"                \"required\": [\r",
									"                    \"id\",\r",
									"                    \"senderId\",\r",
									"                    \"senderName\",\r",
									"                    \"recipientId\",\r",
									"                    \"recipientName\",\r",
									"                    \"listingId\",\r",
									"                    \"totalHours\",\r",
									"                    \"totalAmount\",\r",
									"                    \"status\",\r",
									"                    \"isViewed\",\r",
									"                    \"isCompletedBySender\",\r",
									"                    \"isCompletedBySeller\",\r",
									"                    \"category\",\r",
									"                    \"categoryId\",\r",
									"                    \"title\",\r",
									"                    \"message\",\r",
									"                    \"senderLastName\",\r",
									"                    \"senderCity\",\r",
									"                    \"senderCountry\",\r",
									"                    \"createdOn\",\r",
									"                    \"updatedOn\",\r",
									"                    \"isTradable\"\r",
									"                ],\r",
									"                \"properties\": {\r",
									"                    \"id\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"senderId\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"senderName\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"recipientId\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"recipientName\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"listingId\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"totalHours\": {\r",
									"                        \"type\": \"number\"\r",
									"                    },\r",
									"                    \"totalAmount\": {\r",
									"                        \"type\": \"number\"\r",
									"                    },\r",
									"                    \"status\": {\r",
									"                        \"type\": \"integer\"\r",
									"                    },\r",
									"                    \"isViewed\": {\r",
									"                        \"type\": \"boolean\"\r",
									"                    },\r",
									"                    \"isCompletedBySender\": {\r",
									"                        \"type\": \"boolean\"\r",
									"                    },\r",
									"                    \"isCompletedBySeller\": {\r",
									"                        \"type\": \"boolean\"\r",
									"                    },\r",
									"                    \"category\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"categoryId\": {\r",
									"                        \"type\": \"integer\"\r",
									"                    },\r",
									"                    \"title\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"message\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"senderLastName\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"senderCity\": {\r",
									"                        \"type\": \"null\"\r",
									"                    },\r",
									"                    \"senderCountry\": {\r",
									"                        \"type\": \"null\"\r",
									"                    },\r",
									"                    \"createdOn\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"updatedOn\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"isTradable\": {\r",
									"                        \"type\": \"boolean\"\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"totalCount\": {\r",
									"            \"type\": \"integer\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // validating status code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    if (jsonData.success === true) {\r",
									"\r",
									"        // validating response schema\r",
									"        pm.test(\"Validate response schema\", function () {\r",
									"            pm.expect(jsonData.success).to.be.true;\r",
									"            pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    }\r",
									"    else if (jsonData.message === \"Command aggregate failed: the limit must be positive.\") {\r",
									"\r",
									"        // validating response schema\r",
									"        pm.test(\"Validate response schema fail\", function () {\r",
									"            pm.expect(jsonData.success).to.be.false;\r",
									"            pm.expect(jsonData.message).to.equal(\"Command aggregate failed: the limit must be positive.\");\r",
									"        });\r",
									"    } \r",
									"    else if (jsonData.message === \"Object reference not set to an instance of an object.\") {\r",
									"\r",
									"        // validating response schema\r",
									"        pm.test(\"Empty request object fail\", function () {\r",
									"            pm.expect(jsonData.success).to.be.false;\r",
									"            pm.expect(jsonData.message).to.equal(\"Object reference not set to an instance of an object.\");\r",
									"        });\r",
									"    } \r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"offset\": 0,\r\n  \"limit\": 5,\r\n  \"sortBy\": \"createdOn\",\r\n  \"direction\": \"descending\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:51689/listing/listing/getTradeRequests?requestType=sentRequest",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "51689",
							"path": [
								"listing",
								"listing",
								"getTradeRequests"
							],
							"query": [
								{
									"key": "requestType",
									"value": "sentRequest"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ToggleIsActive",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"  var schema ={\r",
									"    \"type\": \"string\"\r",
									"};\r",
									" var jsonString = JSON.stringify(schema);\r",
									" pm.environment.set(\"schema\", jsonString);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"success\",\r",
									"        \"active\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"success\": {\r",
									"            \"type\": \"boolean\"\r",
									"        },\r",
									"        \"active\": {\r",
									"            \"type\": \"boolean\" \r",
									"       }\r",
									"    }\r",
									"};\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // validating status code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    if (jsonData.active === true) {\r",
									"        // validating response schema\r",
									"        pm.test(\"Validate response schema\", function () {\r",
									"            pm.expect(jsonData.success).to.be.true;\r",
									"            pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    }\r",
									"    else if (jsonData.active === false) {\r",
									"        // validating response schema\r",
									"        pm.test(\"Validate response schema\", function () {\r",
									"            pm.expect(jsonData.success).to.be.true;\r",
									"            pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    }  \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\"{{listId}}\"",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:51689/listing/listing/toggleIsActive",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "51689",
							"path": [
								"listing",
								"listing",
								"toggleIsActive"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetWorkSample",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema ={\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"success\",\r",
									"        \"defaultImg\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"success\": {\r",
									"            \"type\": \"boolean\"\r",
									"        },\r",
									"        \"defaultImg\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // validating status code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    if (jsonData.success === false){\r",
									"        // validating response schema\r",
									"        pm.test(\"Validate response schema\", function () {\r",
									"            pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"schema\", '{}');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:51689/listing/listing/getWorkSample?id={{listId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "51689",
							"path": [
								"listing",
								"listing",
								"getWorkSample"
							],
							"query": [
								{
									"key": "id",
									"value": "{{listId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteServiceListing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"success\",\r",
									"        \"title\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"success\": {\r",
									"            \"type\": \"boolean\"\r",
									"        },\r",
									"        \"title\": {\r",
									"            \"type\": \"string\" \r",
									"       }\r",
									"    }\r",
									"};\r",
									"\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // validating status code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    // validating response schema\r",
									"     pm.test(\"Validate response schema\", function () {\r",
									"        pm.expect(jsonData.success).to.be.true;\r",
									"        pm.response.to.have.jsonSchema(schema);\r",
									"    });    \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"  var schema ={\r",
									"    \"type\": \"string\"\r",
									"};\r",
									" var jsonString = JSON.stringify(schema);\r",
									" pm.environment.set(\"schema\", jsonString);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "\"{{listId}}\"",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:51689/listing/listing/deleteServiceListing",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "51689",
							"path": [
								"listing",
								"listing",
								"deleteServiceListing"
							]
						}
					},
					"response": []
				},
				{
					"name": "SendTradeRequest",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (pm.environment.get(\"skipRequest\") === \"true\") {\r",
									"   pm.execution.skipRequest();\r",
									"}\r",
									"  var schema ={\r",
									"    \"required\": [\r",
									"        \"ListingId\",\r",
									"        \"Message\",\r",
									"        \"TotalHours\",\r",
									"        \"TotalAmount\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"ListingId\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"Message\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"TotalHours\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"TotalAmount\": {\r",
									"            \"type\": \"integer\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									" var jsonString = JSON.stringify(schema);\r",
									" pm.environment.set(\"schema\", jsonString);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema ={\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"success\",\r",
									"        \"id\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"success\": {\r",
									"            \"type\": \"boolean\"        },\r",
									"        \"id\": {\r",
									"            \"type\": \"string\"        }\r",
									"    }};\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // validating status code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    if (jsonData.success === true) {\r",
									"        // validating response schema\r",
									"        pm.test(\"Validate response schema\", function () {\r",
									"            pm.expect(jsonData.success).to.be.true;\r",
									"            pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    } \r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"ListingId\": \"6600efe3c655470001714808\",\r\n  \"Message\": \"Hi I want to learn this skill\",\r\n  \"TotalHours\": 0,\r\n  \"TotalAmount\": 0\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:51689/listing/listing/sendTradeRequest",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "51689",
							"path": [
								"listing",
								"listing",
								"sendTradeRequest"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateReceivedRequest",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (pm.environment.get(\"skipRequest\") === \"true\") {\r",
									"pm.execution.skipRequest();\r",
									"}\r",
									"\r",
									"  var schema ={\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"Id\",\r",
									"        \"Status\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"Id\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"Status\": {\r",
									"            \"type\": \"integer\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									" var jsonString = JSON.stringify(schema);\r",
									" pm.environment.set(\"schema\", jsonString);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema ={\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"success\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"success\": {\r",
									"            \"type\": \"boolean\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // validating status code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    if (jsonData.success === true) {\r",
									"        // validating response schema\r",
									"        pm.test(\"Validate response schema\", function () {\r",
									"            pm.expect(jsonData.success).to.be.true;\r",
									"            pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    } \r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"Id\": \"66012a7cc655470001714819\",\r\n  \"Status\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:51689/listing/listing/updateReceivedRequest",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "51689",
							"path": [
								"listing",
								"listing",
								"updateReceivedRequest"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Profile",
			"item": [
				{
					"name": "IsUserAuthenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema ={\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"isAuthenticated\",\r",
									"        \"username\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"isAuthenticated\": {\r",
									"            \"type\": \"boolean\"        },\r",
									"        \"username\": {\r",
									"            \"type\": \"string\"      }\r",
									"    }};\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // validating status code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    if (jsonData.isAuthenticated === true){\r",
									"        // validating response schema\r",
									"        pm.test(\"Validate response schema\", function () {\r",
									"            pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"}\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"schema\", '{}');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:60190/profile/profile/isUserAuthenticated",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"isUserAuthenticated"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetProfile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema ={\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"username\",\r",
									"        \"isDeactivated\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"username\": {\r",
									"            \"type\": \"string\"        },\r",
									"        \"isDeactivated\": {\r",
									"            \"type\": \"boolean\"        }\r",
									"    }};\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // validating status code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"    if (jsonData.isDeactivated === false) {\r",
									"        // validating response schema\r",
									"        pm.test(\"Validate response schema\", function () {\r",
									"            pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    }\r",
									"    else if (jsonData.isDeactivated === true) {\r",
									"        // validating response schema\r",
									"        pm.test(\"Validate response schema\", function () {\r",
									"            pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"schema\", '{}');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:60190/profile/profile/getProfile",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"getProfile"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateFirstNameAndLastName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"success\",\r",
									"        \"message\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"success\": {\r",
									"            \"type\": \"boolean\"\r",
									"        },\r",
									"        \"message\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // validating status code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    if (jsonData.success === true) {\r",
									"\r",
									"        // validating response schema\r",
									"        pm.test(\"Validate response schema\", function () {\r",
									"            pm.expect(jsonData.success).to.be.true;\r",
									"            pm.expect(jsonData.message).to.eql(\"Firstname and Lastname Changed\");\r",
									"            pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"   var schema ={\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"firstName\",\r",
									"        \"lastName\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"firstName\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"lastName\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									" var jsonString = JSON.stringify(schema);\r",
									" pm.environment.set(\"schema\", jsonString);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"firstName\": \"TestFN2\",\r\n  \"lastName\": \"TestLN2\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:60190/profile/profile/updateFirstAndLastName",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"updateFirstAndLastName"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateAvailability",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"success\",\r",
									"        \"message\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"success\": {\r",
									"            \"type\": \"boolean\"\r",
									"        },\r",
									"        \"message\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // validating status code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    if (jsonData.success === true) {\r",
									"\r",
									"        // validating response schema\r",
									"        pm.test(\"Validate response schema\", function () {\r",
									"            pm.expect(jsonData.success).to.be.true;\r",
									"            pm.expect(jsonData.message).to.equal(\"Availability Updated Successfully\");\r",
									"            pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    }\r",
									"    else if (jsonData.message === \"There was an error while updating availability\") {\r",
									"        // validating response schema\r",
									"        pm.test(\"Error while updating availability\", function () {\r",
									"            pm.expect(jsonData.success).to.be.false;\r",
									"            pm.expect(jsonData.message).to.equal(\"There was an error while updating availability\");\r",
									"            pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"   var schema ={\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"AvailabilityType\",\r",
									"        \"AvailableHours\",\r",
									"        \"EarnTarget\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"AvailabilityType\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"AvailableHours\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"EarnTarget\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									" var jsonString = JSON.stringify(schema);\r",
									" pm.environment.set(\"schema\", jsonString);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"AvailabilityType\": \"1\",\r\n  \"AvailableHours\": \"1\",\r\n  \"EarnTarget\": \"1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:60190/profile/profile/updateAvailability",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"updateAvailability"
							]
						}
					},
					"response": []
				},
				{
					"name": "AddInfo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"success\",\r",
									"        \"message\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"success\": {\r",
									"            \"type\": \"boolean\"\r",
									"        },\r",
									"        \"message\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // validating status code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    if (jsonData.message === \"Description Added Successfully\") {\r",
									"\r",
									"        // validating response schema\r",
									"        pm.test(\"Validate response schema\", function () {\r",
									"            pm.expect(jsonData.success).to.be.true;\r",
									"            pm.expect(jsonData.message).to.equal(\"Description Added Successfully\");\r",
									"            pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    }   \r",
									"    else if (jsonData.message === \"Description Updated Successfully\") {\r",
									"\r",
									"        // validating response schema\r",
									"        pm.test(\"Validate response schema\", function () {\r",
									"            pm.expect(jsonData.success).to.be.true;\r",
									"            pm.expect(jsonData.message).to.equal(\"Description Updated Successfully\");\r",
									"            pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    } \r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"   var schema ={\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"personId\",\r",
									"        \"description\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"personId\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"description\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									" var jsonString = JSON.stringify(schema);\r",
									" pm.environment.set(\"schema\", jsonString);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"personId\": 0,\r\n  \"description\": \"vfcggxf\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:60190/profile/profile/addInfo",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"addInfo"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetProfilePhoto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"success\",\r",
									"        \"myPhotoUrl\",\r",
									"        \"otherPhotoUrl\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"success\": {\r",
									"            \"type\": \"boolean\"        },\r",
									"        \"myPhotoUrl\": {\r",
									"            \"type\": \"string\"        },\r",
									"        \"otherPhotoUrl\": {\r",
									"            \"type\": \"string\"        }\r",
									"    }};\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // validating status code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    if (jsonData.success === true) {\r",
									"\r",
									"        // validating response schema\r",
									"        pm.test(\"Validate response schema\", function () {\r",
									"            pm.expect(jsonData.success).to.be.true;\r",
									"            pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"schema\", '{}');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:60190/profile/profile/getProfilePhoto/?uid={{sellerId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"getProfilePhoto",
								""
							],
							"query": [
								{
									"key": "uid",
									"value": "{{sellerId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetSellerDetails",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema ={\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"success\",\r",
									"        \"userName\",\r",
									"        \"description\",\r",
									"        \"averageRating\",\r",
									"        \"ratingsCount\",\r",
									"        \"country\",\r",
									"        \"createdOn\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"success\": {\r",
									"            \"type\": \"boolean\"\r",
									"        },\r",
									"        \"userName\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"description\": {\r",
									"            \"type\": \"object\",\r",
									"            \"required\": [\r",
									"                \"id\",\r",
									"                \"personId\",\r",
									"                \"description\",\r",
									"                \"isDeleted\"\r",
									"            ],\r",
									"            \"properties\": {\r",
									"                \"id\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"personId\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"description\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"isDeleted\": {\r",
									"                    \"type\": \"boolean\"\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"averageRating\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"ratingsCount\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"country\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"createdOn\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // validating status code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    if (jsonData.success === true) {\r",
									"\r",
									"        // validating response schema\r",
									"        pm.test(\"Validate response schema\", function () {\r",
									"            pm.expect(jsonData.success).to.be.true;\r",
									"            pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    }\r",
									"    else if(jsonData.success === false) {\r",
									"        pm.test(\"Fail to retrieve seller details\", function () {\r",
									"            pm.expect(jsonData.success).to.be.false;\r",
									"        });\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"schema\", '{}');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:60190/profile/profile/getSellerDetails/?uid={{sellerId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"getSellerDetails",
								""
							],
							"query": [
								{
									"key": "uid",
									"value": "{{sellerId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Notificaion",
			"item": [
				{
					"name": "GetNewNotificationCount",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"schema\", '{}');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"success\",\r",
									"        \"noOfNotification\",\r",
									"        \"noOfMessages\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"success\": {\r",
									"            \"type\": \"boolean\"\r",
									"        },\r",
									"        \"noOfNotification\": {\r",
									"            \"type\": \"integer\"\r",
									"        },\r",
									"        \"noOfMessages\": {\r",
									"            \"type\": \"integer\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // validating status code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    if (jsonData.success === true) {\r",
									"\r",
									"        // validating response schema\r",
									"        pm.test(\"Validate response schema\", function () {\r",
									"            pm.expect(jsonData.success).to.be.true;\r",
									"            pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:60190/notification/notification/getNewNotificationCount?numberOfNotifications=5",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"notification",
								"notification",
								"getNewNotificationCount"
							],
							"query": [
								{
									"key": "numberOfNotifications",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "GetNotifications",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"schema\", '{}');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"success\",\r",
									"        \"userNotifications\",\r",
									"        \"totalCount\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"success\": {\r",
									"            \"type\": \"boolean\"\r",
									"        },\r",
									"        \"userNotifications\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"object\",\r",
									"                \"required\": [\r",
									"                    \"id\",\r",
									"                    \"name\",\r",
									"                    \"url\",\r",
									"                    \"message\",\r",
									"                    \"isViewed\",\r",
									"                    \"updatedOn\",\r",
									"                    \"notificationType\",\r",
									"                    \"icon\"\r",
									"                ],\r",
									"                \"properties\": {\r",
									"                    \"id\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"name\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"url\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"message\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"isViewed\": {\r",
									"                        \"type\": \"boolean\"\r",
									"                    },\r",
									"                    \"updatedOn\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"notificationType\": {\r",
									"                        \"type\": \"integer\"\r",
									"                    },\r",
									"                    \"icon\": {\r",
									"                        \"type\": \"string\"\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"totalCount\": {\r",
									"            \"type\": \"integer\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // validating status code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    if (jsonData.success === true) {\r",
									"\r",
									"        // setting value of environment variable notificationId\r",
									"        var notificationId = jsonData.userNotifications[0].id;\r",
									"        pm.environment.set(\"notificationId\", notificationId);\r",
									"\r",
									"        // validating response schema\r",
									"        pm.test(\"Validate response schema\", function () {\r",
									"            pm.expect(jsonData.success).to.be.true;\r",
									"            pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:60190/notification/notification/getNotification",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"notification",
								"notification",
								"getNotification"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetNotificationLoadMore",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"schema\", '{}');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"success\",\r",
									"        \"userNotifications\",\r",
									"        \"totalCount\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"success\": {\r",
									"            \"type\": \"boolean\"\r",
									"        },\r",
									"        \"userNotifications\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"object\",\r",
									"                \"required\": [\r",
									"                    \"id\",\r",
									"                    \"name\",\r",
									"                    \"url\",\r",
									"                    \"message\",\r",
									"                    \"isViewed\",\r",
									"                    \"updatedOn\",\r",
									"                    \"notificationType\",\r",
									"                    \"icon\"\r",
									"                ],\r",
									"                \"properties\": {\r",
									"                    \"id\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"name\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"url\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"message\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"isViewed\": {\r",
									"                        \"type\": \"boolean\"\r",
									"                    },\r",
									"                    \"updatedOn\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"notificationType\": {\r",
									"                        \"type\": \"integer\"\r",
									"                    },\r",
									"                    \"icon\": {\r",
									"                        \"type\": \"string\"\r",
									"                    }\r",
									"                }\r",
									"            }\r",
									"        },\r",
									"        \"totalCount\": {\r",
									"            \"type\": \"integer\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // validating status code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    if (jsonData.success === true) {\r",
									"\r",
									"        // validating response schema\r",
									"        pm.test(\"Validate response schema\", function () {\r",
									"            pm.expect(jsonData.success).to.be.true;\r",
									"            pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:60190/notification/notification/getNotification/?loadMore=5&offSet=5&_=1711449951551",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"notification",
								"notification",
								"getNotification",
								""
							],
							"query": [
								{
									"key": "loadMore",
									"value": "5"
								},
								{
									"key": "offSet",
									"value": "5"
								},
								{
									"key": "_",
									"value": "1711449951551"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "ReadMarkedNotifications",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"schema\", '{}');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"success\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"success\": {\r",
									"            \"type\": \"boolean\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // validating status code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    if (jsonData.success === true) {\r",
									"\r",
									"        // validating response schema\r",
									"        pm.test(\"Validate response schema\", function () {\r",
									"            pm.expect(jsonData.success).to.be.true;\r",
									"            pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    }\r",
									"    else if (jsonData.success === false){\r",
									"\r",
									"        // validating response schema\r",
									"        pm.test(\"Read marked notfication failed\", function () {\r",
									"            pm.expect(jsonData.success).to.be.false;\r",
									"        });\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "ids",
									"value": "{{notificationId}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:60190/notification/notification/readMarkedNotifications",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"notification",
								"notification",
								"readMarkedNotifications"
							]
						}
					},
					"response": []
				},
				{
					"name": "RemoveMarkedNotifications",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"if (pm.environment.get(\"skipRequest\") === \"true\") {\r",
									"    pm.execution.skipRequest();\r",
									"}\r",
									"pm.environment.set(\"schema\", '{}');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"success\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"success\": {\r",
									"            \"type\": \"boolean\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // validating status code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    if (jsonData.success === true) {\r",
									"\r",
									"        // validating response schema\r",
									"        pm.test(\"Validate response schema\", function () {\r",
									"            pm.expect(jsonData.success).to.be.true;\r",
									"            pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "ids",
									"value": "{{notificationId}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:60190/notification/notification/removeMarkedNotifications",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"notification",
								"notification",
								"removeMarkedNotifications"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Chat",
			"item": [
				{
					"name": "GetFirstChatroom",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"schema\", '{}');"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"success\",\r",
									"        \"chatroom\",\r",
									"        \"myCurrentUser\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"success\": {\r",
									"            \"type\": \"boolean\"\r",
									"        },\r",
									"        \"chatroom\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"myCurrentUser\": {\r",
									"            \"type\": \"string\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									"    var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // validating status code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    if (jsonData.success === true) {\r",
									"\r",
									"        // setting value of environment variable chatroomId\r",
									"        var chatroomId = jsonData.chatroom;\r",
									"        pm.environment.set(\"chatroomId\", chatroomId);\r",
									"\r",
									"        // validating response schema\r",
									"        pm.test(\"Validate response schema\", function () {\r",
									"            pm.expect(jsonData.success).to.be.true;\r",
									"            pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:60190/profile/profile/getFirstChatroom",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"getFirstChatroom"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetChatRoomDetailsList",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"   var schema ={\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"UserIdToList\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"UserIdToList\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"string\"\r",
									"            }\r",
									"        }\r",
									"    }\r",
									"};\r",
									" var jsonString = JSON.stringify(schema);\r",
									" pm.environment.set(\"schema\", jsonString);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var schema = {\r",
									"    \"type\": \"object\",\r",
									"    \"required\": [\r",
									"        \"success\",\r",
									"        \"result\"\r",
									"    ],\r",
									"    \"properties\": {\r",
									"        \"success\": {\r",
									"            \"type\": \"boolean\"\r",
									"        },\r",
									"        \"result\": {\r",
									"            \"type\": \"array\",\r",
									"            \"items\": {\r",
									"                \"type\": \"object\",\r",
									"                \"required\": [\r",
									"                    \"userIdToList\",\r",
									"                    \"userIdTo\",\r",
									"                    \"userNameTo\",\r",
									"                    \"userIdFrom\",\r",
									"                    \"userNameFrom\",\r",
									"                    \"profilePicUrl\",\r",
									"                    \"unreadMessages\"\r",
									"                ],\r",
									"                \"properties\": {\r",
									"                    \"userIdToList\": {\r",
									"                        \"type\": \"null\"\r",
									"                    },\r",
									"                    \"userIdTo\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"userNameTo\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"userIdFrom\": {\r",
									"                        \"type\": \"null\"\r",
									"                    },\r",
									"                    \"userNameFrom\": {\r",
									"                        \"type\": \"null\"\r",
									"                    },\r",
									"                    \"profilePicUrl\": {\r",
									"                        \"type\": \"string\"\r",
									"                    },\r",
									"                    \"unreadMessages\": {\r",
									"                        \"type\": \"integer\"\r",
									"                    }\r",
									"                }\r",
									"            }           \r",
									"        }\r",
									"    }\r",
									"};\r",
									"var statusCode = pm.response.code;\r",
									"\r",
									"if (statusCode === 200) {\r",
									"    var jsonData = pm.response.json();\r",
									"\r",
									"    // validating status code\r",
									"    pm.test(\"Status code is 200\", function () {\r",
									"        pm.response.to.have.status(200);\r",
									"    });\r",
									"\r",
									"    if (jsonData.success === true) {\r",
									"\r",
									"        // validating response schema\r",
									"        pm.test(\"Validate response schema\", function () {\r",
									"            pm.expect(jsonData.success).to.be.true;\r",
									"            pm.response.to.have.jsonSchema(schema);\r",
									"        });\r",
									"    }\r",
									"    else if (jsonData.message === \"Error while retrieving chatroom details\") {\r",
									"\r",
									"        // validating response schema\r",
									"        pm.test(\"Get chat room details failed\", function () {\r",
									"            pm.expect(jsonData.success).to.be.false;\r",
									"        });\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{authToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"UserIdToList\": [\r\n    \"{{chatroomId}}\"\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:60190/profile/profile/getChatRoomDetailsList/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "60190",
							"path": [
								"profile",
								"profile",
								"getChatRoomDetailsList",
								""
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"var schemaString = pm.environment.get(\"schema\");\r",
					"\r",
					"if(schemaString!== \"{}\" )\r",
					" {\r",
					"  if(JSON.stringify(request.data)!== \"{}\")\r",
					"   {\r",
					"    var requestBody = JSON.parse(request.data);\r",
					"\r",
					"    var requestSchema = JSON.parse(schemaString);\r",
					"\r",
					"    // Validate request body against schema\r",
					"    var Ajv = require('ajv');\r",
					"    var ajv = new Ajv();\r",
					"    var valid = ajv.validate(requestSchema, requestBody);\r",
					"\r",
					"    // Check if request schema is valid\r",
					"    if (valid) {\r",
					"     pm.test('Request schema validation passed', function() {\r",
					"        pm.expect(valid).to.be.true;\r",
					"     });\r",
					"    } \r",
					"    // Check if request schema is invalid\r",
					"    else {\r",
					"     pm.test('Request schema validation failed', function() {\r",
					"        pm.expect(valid).to.be.false;\r",
					"    });\r",
					"   }\r",
					" }\r",
					"}\r",
					"\r",
					"var statusCode=pm.response.code;\r",
					"\r",
					"//Validate status code\r",
					"if (statusCode === 401) {\r",
					"    pm.test(\"Status code is 401 for unauthorized user\", function () {\r",
					"        pm.response.to.have.status(401);\r",
					"    });\r",
					"}\r",
					"else if (statusCode === 404) {\r",
					"    pm.test(\"Status code 404 not Found\", function () {\r",
					"        pm.response.to.have.status(404);\r",
					"    });\r",
					"}\r",
					"else if (statusCode === 415) {\r",
					"    pm.test(\"Status code 415 Unsupported Media Type\", function () {\r",
					"        pm.response.to.have.status(415);\r",
					"    });\r",
					"  }\r",
					"// Validating header\r",
					"pm.test(\"Validate header\", function () {\r",
					"    pm.expect(pm.request.headers.get(\"Connection\")).to.eql(\"keep-alive\");      \r",
					"    pm.expect(pm.request.headers.get(\"Cache-Control\")).to.eql(\"no-cache\");\r",
					"\r",
					"    if(pm.request.headers.has('Content-Type')){\r",
					"     pm.expect(pm.request.headers.get(\"Content-Type\")).to.eql(\"application/json\");\r",
					"    }\r",
					"    if(pm.response.headers.has('Content-Type')){\r",
					"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql(\"application/json; charset=utf-8\");\r",
					"    }\r",
					"});\r",
					"\r",
					"//Validating response time\r",
					"pm.test(\"Response time is below 500ms\", function () {\r",
					"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
					"});"
				]
			}
		}
	]
}